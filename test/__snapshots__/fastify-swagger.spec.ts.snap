// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`transformer > description and examples fields with custom schema registry > should populate description and examples 3.0 1`] = `
{
  "components": {
    "schemas": {
      "User": {
        "additionalProperties": false,
        "description": "User",
        "example": {
          "name": "Someone",
        },
        "properties": {
          "name": {
            "default": "Unknown",
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "UserId": {
        "default": "J1",
        "description": "User ID",
        "example": "U234",
        "type": "string",
      },
      "UserIdInput": {
        "default": "J1",
        "description": "User ID",
        "example": "U234",
        "type": "string",
      },
    },
  },
  "info": {
    "title": "SampleApi",
    "version": "1.0.1",
  },
  "openapi": "3.1.0",
  "paths": {
    "/login": {
      "post": {
        "parameters": [
          {
            "description": "query string example",
            "in": "query",
            "name": "baz",
            "required": true,
            "schema": {
              "example": "wiiiiiiiiii",
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userId": {
                    "$ref": "#/components/schemas/UserIdInput",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "baz": {
                      "type": "string",
                    },
                    "user": {
                      "$ref": "#/components/schemas/User",
                    },
                    "userId": {
                      "$ref": "#/components/schemas/UserId",
                    },
                  },
                  "required": [
                    "baz",
                    "userId",
                    "user",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > description and examples fields with custom schema registry > should populate description and examples 3.1 1`] = `
{
  "components": {
    "schemas": {
      "User": {
        "additionalProperties": false,
        "description": "User",
        "example": {
          "name": "Someone",
        },
        "properties": {
          "name": {
            "default": "Unknown",
            "type": "string",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "UserId": {
        "default": "J1",
        "description": "User ID",
        "example": "U234",
        "type": "string",
      },
      "UserIdInput": {
        "default": "J1",
        "description": "User ID",
        "example": "U234",
        "type": "string",
      },
    },
  },
  "info": {
    "title": "SampleApi",
    "version": "1.0.1",
  },
  "openapi": "3.1.0",
  "paths": {
    "/login": {
      "post": {
        "parameters": [
          {
            "description": "query string example",
            "in": "query",
            "name": "baz",
            "required": true,
            "schema": {
              "example": "wiiiiiiiiii",
              "type": "string",
            },
          },
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "userId": {
                    "$ref": "#/components/schemas/UserIdInput",
                  },
                },
                "type": "object",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "baz": {
                      "type": "string",
                    },
                    "user": {
                      "$ref": "#/components/schemas/User",
                    },
                    "userId": {
                      "$ref": "#/components/schemas/UserId",
                    },
                  },
                  "required": [
                    "baz",
                    "userId",
                    "user",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > generates types for fastify-swagger correctly 1`] = `
{
  "components": {
    "schemas": {},
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/delete": {
      "delete": {
        "description": "delete route",
        "responses": {
          "204": {
            "description": "Empty response",
          },
        },
      },
    },
    "/login": {
      "post": {
        "description": "login route",
        "externalDocs": {
          "description": "check google",
          "url": "https://google.com",
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "code": {
                    "exclusiveMaximum": true,
                    "exclusiveMinimum": true,
                    "maximum": 10000,
                    "minimum": 1,
                    "type": "number",
                  },
                  "password": {
                    "maxLength": 32,
                    "type": "string",
                  },
                  "seed": {
                    "maximum": 1000,
                    "minimum": 1,
                    "type": "number",
                  },
                  "username": {
                    "description": "someDescription",
                    "maxLength": 32,
                    "type": "string",
                  },
                },
                "required": [
                  "username",
                  "seed",
                  "code",
                  "password",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Default Response",
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "required_role": {
                      "enum": [
                        "admin",
                      ],
                      "nullable": true,
                      "type": "string",
                    },
                    "scopes": {
                      "items": {
                        "anyOf": [
                          {
                            "enum": [
                              "read",
                            ],
                            "type": "string",
                          },
                          {
                            "enum": [
                              "write",
                            ],
                            "type": "string",
                          },
                          {
                            "enum": [
                              null,
                            ],
                            "nullable": true,
                            "type": "string",
                          },
                        ],
                      },
                      "maxItems": 3,
                      "minItems": 3,
                      "type": "array",
                    },
                  },
                  "required": [
                    "required_role",
                    "scopes",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Default Response",
          },
        },
        "summary": "login your account",
        "tags": [
          "auth",
        ],
      },
    },
    "/no-schema": {
      "post": {
        "responses": {
          "200": {
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > generates types for fastify-swagger correctly 3.1 1`] = `
{
  "components": {
    "schemas": {},
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.1.0",
  "paths": {
    "/delete": {
      "delete": {
        "description": "delete route",
        "responses": {
          "204": {
            "description": "Empty response",
          },
        },
      },
    },
    "/login": {
      "post": {
        "description": "login route",
        "externalDocs": {
          "description": "check google",
          "url": "https://google.com",
        },
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "password": {
                    "maxLength": 32,
                    "type": "string",
                  },
                  "seed": {
                    "minimum": 1,
                    "type": "number",
                  },
                  "username": {
                    "description": "someDescription",
                    "maxLength": 32,
                    "type": "string",
                  },
                },
                "required": [
                  "username",
                  "seed",
                  "password",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                },
              },
            },
            "description": "Default Response",
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "required_role": {
                      "enum": [
                        "admin",
                      ],
                      "type": "string",
                    },
                  },
                  "required": [
                    "required_role",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Default Response",
          },
        },
        "summary": "login your account",
        "tags": [
          "auth",
        ],
      },
    },
    "/no-schema": {
      "post": {
        "responses": {
          "200": {
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > null type > should replace \`anyOf\` when it contains 2 elements: \`{ anyOf: [<null>, <non-null>]} s\` and one of them is \`"type": "null" with \`{...<non-null>, nullable: true }\` 1`] = `
{
  "components": {
    "schemas": {},
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "enum": [
                        null,
                      ],
                      "nullable": true,
                      "type": "string",
                    },
                    {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                    {
                      "enum": [
                        "any",
                      ],
                      "type": "string",
                    },
                  ],
                },
              },
            },
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > null type > should replace \`anyOf\` with \`"allOf": [...], "nullable": true\`  when schema contains only two elements and one is \`"type": "null"\` 1`] = `
{
  "components": {
    "schemas": {},
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "enum": [
                        null,
                      ],
                      "nullable": true,
                      "type": "string",
                    },
                    {
                      "items": {
                        "type": "string",
                      },
                      "type": "array",
                    },
                  ],
                },
              },
            },
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > should generate input and output schemas correctly 1`] = `
{
  "components": {
    "schemas": {},
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/": {
      "get": {
        "parameters": [
          {
            "in": "query",
            "name": "id",
            "required": false,
            "schema": {
              "default": "1",
              "type": "string",
            },
          },
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "id": {
                      "default": "1",
                      "type": "string",
                    },
                  },
                  "required": [
                    "id",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > should generate nested and circular refs correctly 1`] = `
{
  "components": {
    "schemas": {
      "Group": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "string",
          },
          "subgroups": {
            "items": {
              "$ref": "#/components/schemas/Group",
            },
            "type": "array",
          },
        },
        "required": [
          "id",
          "subgroups",
        ],
        "type": "object",
      },
      "User": {
        "additionalProperties": false,
        "properties": {
          "groups": {
            "items": {
              "$ref": "#/components/schemas/Group",
            },
            "type": "array",
          },
          "id": {
            "type": "string",
          },
        },
        "required": [
          "id",
          "groups",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/login": {
      "post": {
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "groups": {
                      "items": {
                        "$ref": "#/components/schemas/Group",
                      },
                      "type": "array",
                    },
                    "user": {
                      "$ref": "#/components/schemas/User",
                    },
                  },
                  "required": [
                    "groups",
                    "user",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > should generate ref correctly using global registry 1`] = `
{
  "components": {
    "schemas": {
      "TokenInput": {
        "description": "Token description",
        "maxLength": 12,
        "minLength": 12,
        "type": "string",
      },
    },
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/login": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "access_token": {
                    "$ref": "#/components/schemas/TokenInput",
                  },
                  "refresh_token": {
                    "$ref": "#/components/schemas/TokenInput",
                  },
                },
                "required": [
                  "access_token",
                  "refresh_token",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > should generate ref correctly using z.registry 1`] = `
{
  "components": {
    "schemas": {
      "TokenInput": {
        "maxLength": 12,
        "minLength": 12,
        "type": "string",
      },
    },
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/login": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "access_token": {
                    "$ref": "#/components/schemas/TokenInput",
                  },
                  "refresh_token": {
                    "$ref": "#/components/schemas/TokenInput",
                  },
                },
                "required": [
                  "access_token",
                  "refresh_token",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > should generate referenced input and output schemas correctly 1`] = `
{
  "components": {
    "schemas": {
      "User": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string",
          },
          "id": {
            "default": "1",
            "type": "string",
          },
        },
        "required": [
          "id",
          "createdAt",
        ],
        "type": "object",
      },
      "UserInput": {
        "properties": {
          "createdAt": {},
          "id": {
            "default": "1",
            "type": "string",
          },
        },
        "required": [
          "createdAt",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/UserInput",
                  },
                },
                "required": [
                  "user",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "additionalProperties": false,
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User",
                    },
                  },
                  "required": [
                    "user",
                  ],
                  "type": "object",
                },
              },
            },
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > should generate referenced input and output schemas correctly when referencing a registered schema 1`] = `
{
  "components": {
    "schemas": {
      "User": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string",
          },
          "id": {
            "default": "1",
            "type": "string",
          },
        },
        "required": [
          "id",
          "createdAt",
        ],
        "type": "object",
      },
      "UserInput": {
        "properties": {
          "createdAt": {},
          "id": {
            "default": "1",
            "type": "string",
          },
        },
        "required": [
          "createdAt",
        ],
        "type": "object",
      },
    },
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > should not generate ref 1`] = `
{
  "components": {
    "schemas": {},
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/login": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "access_token": {
                    "maxLength": 12,
                    "minLength": 12,
                    "type": "string",
                  },
                  "age": {
                    "nullable": true,
                    "type": "number",
                  },
                  "metadata": {
                    "additionalProperties": {
                      "type": "string",
                    },
                    "type": "object",
                  },
                  "refresh_token": {
                    "maxLength": 12,
                    "minLength": 12,
                    "type": "string",
                  },
                },
                "required": [
                  "access_token",
                  "refresh_token",
                  "metadata",
                ],
                "type": "object",
              },
            },
          },
          "required": true,
        },
        "responses": {
          "200": {
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > should not remove schema only referenced from components.schemas from the final openAPI object 1`] = `
{
  "components": {
    "schemas": {
      "User": {
        "additionalProperties": false,
        "properties": {
          "id": {
            "default": "1",
            "type": "string",
          },
          "name": {
            "$ref": "#/components/schemas/UserName",
          },
        },
        "required": [
          "id",
          "name",
        ],
        "type": "object",
      },
      "UserInput": {
        "properties": {
          "id": {
            "default": "1",
            "type": "string",
          },
          "name": {
            "$ref": "#/components/schemas/UserNameInput",
          },
        },
        "required": [
          "name",
        ],
        "type": "object",
      },
      "UserName": {
        "type": "string",
      },
      "UserNameInput": {
        "type": "string",
      },
    },
    "securitySchemes": {
      "authorization": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http",
      },
    },
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;

exports[`transformer > should not remove securitySchemes from the final openAPI object 1`] = `
{
  "components": {
    "schemas": {
      "User": {
        "additionalProperties": false,
        "properties": {
          "createdAt": {
            "format": "date-time",
            "type": "string",
          },
          "id": {
            "default": "1",
            "type": "string",
          },
        },
        "required": [
          "id",
          "createdAt",
        ],
        "type": "object",
      },
      "UserInput": {
        "properties": {
          "createdAt": {},
          "id": {
            "default": "1",
            "type": "string",
          },
        },
        "required": [
          "createdAt",
        ],
        "type": "object",
      },
    },
    "securitySchemes": {
      "authorization": {
        "bearerFormat": "JWT",
        "scheme": "bearer",
        "type": "http",
      },
    },
  },
  "info": {
    "description": "Sample backend service",
    "title": "SampleApi",
    "version": "1.0.0",
  },
  "openapi": "3.0.3",
  "paths": {
    "/": {
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserInput",
              },
            },
          },
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User",
                },
              },
            },
            "description": "Default Response",
          },
        },
      },
    },
  },
  "servers": [],
}
`;
